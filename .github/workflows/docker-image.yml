name: Build, Package, and Push Docker Image

on:
  push:
    branches:
      - main

jobs:
  build-package-and-push:
    runs-on: ubuntu-latest

    steps:
      # 1. 저장소의 코드를 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. JDK 설치 (Gradle 빌드에 필요)
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # OpenJDK 배포판
          java-version: '17'     # Java 버전 (Spring Boot 3.x의 경우 Java 17 이상 필요)

      # 3. Gradle 캐시 설정 (빌드 속도 향상)
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      # 4. Gradle 빌드 및 JAR 파일 생성
      - name: Build JAR file using Gradle
        working-directory: festi # Gradle Wrapper가 위치한 디렉토리 설정
        run: ./gradlew clean bootJar

      # 5. Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 6. Docker 이미지 빌드 및 태깅 (자동 태그 증가)
      - name: Build and tag Docker image
        run: |
          VERSION=0.${{ github.run_number }}
          echo "Using VERSION=$VERSION"
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/festi_server:$VERSION .
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/festi_server:$VERSION ${{ secrets.DOCKERHUB_USERNAME }}/festi_server:latest
      # 7. Docker Hub에 푸시
      - name: Push Docker image to Docker Hub
        run: |
          VERSION=0.${{ github.run_number }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/festi_server:$VERSION
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/festi_server:latest
